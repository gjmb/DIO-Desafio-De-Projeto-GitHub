Pensamento computacional

	Def.
		Refere-se ao processo de pensamento envolvido na expressão de soluções
		em passos computacionais ou algoritmos que podem ser implementados no
		computador.
		
		Formulação e resolução de problemas de forma sistemática e eficiente
		
	4 Pilares
	
		Decomposição: Dividir um problema complexo em subproblemas 
		
		Reconhecimento de padrões: Identificar padrões ou tendências. Similaridades
					    e diferenças entre problemas
		
		Abstração: Extrapolar o conceito do problema para uma forma generalista
		
		Design de algoritmos: Definir passo a passo a solução do problema
		
	Processo contínuo
	
		- Def. uma solução -> testar a solução <-> Aperfeiçoamento da solução
	
	
		Habilidades humanas: Abstração (resol. de problemas)			
			 	      Automatização (Expressão de solução)
		Recursos computacionais: Análise (Execução da solução e avaliação (refinamento))
		
	Benefícios
	
		Pensamento sistemático
		Colaboração dentro da equipe
		Criatividade e design
		Facilitador
		
	
	Variação dos pilares
	
		Raciocinio lógico
		
			Forma de pensamento estruturado, que permite encontrar a conclusão ou determinar a 
			resolução de um problema.
		
		- Habilidade treinavel
		
		Classificação
		
		Indução: Fenômeno observado -indução-> Leis e teorias (ciências expermentais)
		
		Dedução: Leis e teorias -dedução-> Previsões e explicações (ciências exatas)
		
		Abdução: Conclusão -> Premissa (A grama está molhada, logo deve ter chovido)
		(Processo investigativo, diagnóstico)
		
		Inferência 
			Sintética: Abdução, Indução
			Análitica: Dedução
			
		Aperfeiçamento
		
		A partir de uma solução, determinar pontos de melhora e refinamento
		
		- Ato de aperfeiçoar
		
			-Encontrar solução eficiente
			-Otimizar processo
				-Melhor uso de recursos
			
			-Simplificar linhas de códigos
			-Funções bem definidas
				-melhorar códigos e algoritmos
				
		Processo contínuo
		
		
	-Decomposição
	
	Def.
	
		Dado um problema complexo, devemos quebra-lo em problemas menores. Portanto, problemas
		mais fáceis e gerenciáveis.
	
			
	Estratégia
	
		Análise: Processo de quebrar e determinar partes menores e gerenciáveis 
		
		Síntese: Combinar os elementos recompondo o problema original
		
		
		Ordem de execução de tarefas menores
		
		Sequêncial: Dependência entre tarefas. Executadas em "fila"
		
		Paralelo: Tarefas podem ser executadas concomitantemente
	
	Como decompor?
	
		Entender o problema
		
			Identificar: Componentes, características e dependências
			
			Identicar ou coletar dados -> agregar os dados -> funcionalidade
			
	-Reconhecimento de padrões
	
	- Modelo base
	- Estrutura invariante
	- Repetição
	- Similaridades e diferenças
	
	Exemplos: Compressão de dados, class. de dados, reconhecimentos de img e fala, analise de cenas,
		  Classificação de documentos
	
	Por que determinar padrões?
	
	Generalizar, com objetivo de obter resolução para problemas diferentes
	
	- Classificação de objetos
	
	Como o computador reconhece padrões?
	
		Ser humano
		- Grau de similaridade 
		- Grupos conhecidos x objeto desconhecido
		
		-> Comparação
		
		Computador
		
		-Representação de atributos
		-Aprendizado - conceito associado ao objeto
		-Armazenar os dados
		-Regras de decisão
		
	-Abstração
	
	 Abstrair: Observar, um ou mais elementos, avaliando características e prorpiedades em separado
	 Abstração: Processo intelectual de isolamento de um objeto da realidade
	 Generalizar: Tornar-se geral, mais amplo, extensão
	 Generalização: Na lógica, é a operação intelectual que consiste em reunir numa classe geral, um
	 		conjunto de seres ou fenômenos similares.
	 
	Como classificar os dados?
	
		-Características
		-Pontos essenciais
		-Generalizar x detalhar
			-> representação
			
	Representação de dados
	
	-Algoritmos
	
		Processamento de dados
	
		O Computador recebe, manipula e armazena os dados
	
		Programas -> Instruções - O que precisa ser feitos?
					 - Qual a ordem de execução?
				         - Precisa ser entendido por humanos e máquinas
		
		Desenvolvimentos do Programa
		
		-Análise: Estudo e definição do dados de entrada e saída
		-Algoritmo: Descreve o programa por meio de ferramentas narrativas, fluxograma ou 
			    pseudocódigo
		- Codificacação: Agoritmo é codificado em linguagem de programação
		
		Def.
		
			-Sequência de passos com objetivo definido
			-Execução de tarefas específicas
			-Conjunto de operações que resultam em uma sucessão finita de ações
			
		Como construir um algoritmo?
		
		- Compreenção do problema
		- Def. dos dados de entrada
		- Def. processamento
		- Def. dados de saída
		- Utilizar um método de construção 
		- Teste e diagnóstico
		
		Construção
		
		Narrativa: Utiliza a linguagem natural (problema: diveras interpretações possíveis)
		Fluxograma: Utiliza símbolos pré-definidos 
		Pseudocódigo: Passos a serem seguidos (Portugol)
		
		
	-Estudo de caso
	
	Como resolver o problema utilizando o pensamento computacional?
	
	-Lógica

	    Def. Problema: É uma questão que foge a uma determinada regra e que impede de atingir
	      um objetivo com eficiência e eficácia.

	    Def. lógica: Parte da filosofia que trata das formas de pensamento em geral e das operações
	      intelectuais que visam à determinação do que é verdadeiro ou não.

	      Def. Lógica computacional: Organização e planejamento das Instruções, assertivas em um algoritmo,
		a fim de viabilizar a implantação de um programa.
		
	    -Técnicas de Lógica de programação

	      -Linear 

		Modelo tradicional
		Sem vínculo
		  Estrutura hierárquica
		  Programação de computadores
		Execução Sequencial, Recursos limitados e Única dimensão

	      -Estruturada

		Organização, disposição e ordem dos elementos essenciais que compõem um corpo (concreto ou abstrato)

		      Processamento de dados -> Programas 
		Escrita
		Entendimento 
		Validação
		Manutenção

	      -Técnica Modular

		Partes Independentes controladas por um conjunto de Regras

		  Dados -> processamento -> saída

		  Simplificação, Decompor o problema, Verificação do módulo
	
	-Características de um programa

	    Legibilidade

	      facilidade de leitura
	      compreensão
	      Ortogonalidade (Coerência nas instruções)
	      Definição adequada das estruturas
	    
	    Redigibilidade - Facilidade de escrita

	      Pode conflitar com a Legibilidade
	      Ortogonalidade
	      Simplicidade da escrita
	      Suporte a abstração
	      Reuso do código
	      Expressividade
	    
	    Confiabilidade - Fazer o que foi programado para fazer

	      Verificação de tipos
	      Trata exceções
	      Uso de ponteiros
	      Compatibilidade entre compiladores
	      
	    Custo - Análise de impacto

	      Treinamento
	      Codificação
	      Compilação
	      Execução
	      Infraestrutura 

	    Outras Características

	    Atualizações, Uso para IA, Disponibilidade de ferramentas, comunidade ativa e adoção pelo mercado  	
	
	  -Análise do código

	   -Léxica 

	      Particionar ->
		Elementos denominado tokens
		
	      Classificar -> 
		Elementos> identificadores, palavras reservadas, números, strings
		
	      Eliminar
		Elementos> Caracteres de espaço em branco, comentários,..
	    
      	   -Sintática

	 	 Estrutura e corretude do programa

	   -Semântica 

		  Lógica do programa 
			
	-Paradigmas de Programão

	    Def. 
	      Forma de resolução de problemas com diretrizes e limitações específicas de 
	      de cada Paradigma utilizando LP.

	      Exemplo: Orientação à objetos, procedural, funcional, estruturado, Comp. Distribuída e Lógico 

	      -Estruturado

		Sequencia, Decisão e iteração 

	      -Orientação à objetos

		Um objeto é descrito por características específicas, comportamentos e estados

		Pilares

		Herança, Encapsulamento, Polimorfismo e Abstração
			
			
			
		
		
		
		
			
			
			
			
			
			
			
		
		
		
		
	
	
	
	
	
	
	
	
			
			
				
	
		 
		
		
		
		
		
			
		
	
	
		
	
